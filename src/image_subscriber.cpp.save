#include "image_subscriber.hpp"
#include <iostream>


ImageSubscriber::ImageSubscriber() : Node("image_subscriber") {
	RCLCPP_INFO(this->get_logger(), "Initializing ImageSubscriber node");

	RCLCPP_INFO(this->get_logger(), "Starting camera subscription");

	camera_subscription_ = this->create_subscription<sensor_msgs::msg::Image>(
				"/image_raw",
				10,
				std::bind(&ImageSubscriber::onImageMsg, this, std::placeholders::_1));

}

ImageSubscriber::~ImageSubscriber()
{
	RCLCPP_INFO(this->get_logger(), "Subscriber out");
}


void ImageSubscriber::onImageMsg(const sensor_msgs::msg::Image::SharedPtr msg) {

	std::cout << "Encoding: " <<  msg->encoding << std::endl;
	RCLCPP_INFO(this->get_logger(), "Received image!");

	cv_bridge::CvImagePtr cv_ptr = cv_bridge::toCvCopy(msg, msg->encoding);
	cv::Mat img = cv_ptr->image;

	cv::cvtColor(img, img, CV_BGR2GRAY); 
	resize(img, img, cv::Size(120,120), cv::INTER_LINEAR);

	int rows = img.rows;
	int cols = img.cols;

	uint8_t row_counter = 0;
	
	std::vector<std::vector<uint8_t>> lines;

	lines.push_back()

  	uint8_t *data1;
	uint8_t *data2;
	uint8_t *data3;

	for(int i = 0; i < rows; i++){
		for(int j = 0; j < cols; j++){
			lines
		}
		row_counter += 1;
	}

//	int height, width, channels = img.shape;			
 	std::cout << "Image rows = " << rows << ",  Image cols = " << cols  << std::endl;
	RCLCPP_INFO(this->get_logger(), "Successfully loaded image!");
}

int main(int argc, char *argv[])
{
	setvbuf(stdout,NULL,_IONBF,BUFSIZ);

	rclcpp::init(argc,argv);
	rclcpp::spin(std::make_shared<ImageSubscriber>());

	rclcpp::shutdown();
	return 0;
}
