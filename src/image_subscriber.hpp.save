#pragma once

#include <rclcpp/rclcpp.hpp>
#include <sensor_msgs/msg/image.hpp>
#include <cv_bridge/cv_bridge.h>

#include <opencv2/opencv.hpp>
#include <opencv2/
cv::Mat ImageSubscriber::applyConvolutionToImage(const cv::Mat& inputImage) >
#include <opencv2/imgproc/imgproc.hpp>
#include <vector>
#include <iostream>
#include <stdint.h>

class ImageSubscriber : public rclcpp::Node
{

public:
	ImageSubscriber();

	~ImageSubscriber();

private:
	void onImageMsg(const sensor_msgs::msg::Image::SharedPtr msg);
	void filterImage(const uint8_t *rowAbove, const uint8_t *rowCenter, const uint8_t* rowBelow,  uint8_t* outputRow, int width);
	cv::Mat applyConvolutionToImage(const cv::Mat& inputImage);


public:

private:
	rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr camera_subscription_;

};


